import os
import telebot
from telebot import types
from datetime import datetime, timedelta

BOT_TOKEN = "6217965722:AAEW6DismZ6EdJDCjiNZqyh034J3fSm-sX0"
bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.reply_to(message, "Hi! How can I help you today?")
    show_options(message.chat.id)


def show_options(chat_id):
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    button1 = types.KeyboardButton('Food')
    button2 = types.KeyboardButton('Transport')
    keyboard.add(button1, button2)

    bot.send_message(chat_id, 'Please select an option:', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['Food', 'Transport'])
def handle_option(message):
    option = message.text
    if option == 'Food':
        show_food_options(message.chat.id)
    elif option == 'Transport':
        show_transport_options(message.chat.id)


def show_food_options(chat_id):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button1 = types.KeyboardButton('Start an order')
    button2 = types.KeyboardButton('Join an order')
    keyboard.add(button1, button2)

    bot.send_message(chat_id, 'Food options:', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['Start an order', 'Join an order'])
def handle_food_option(message):
    option = message.text
    if option == 'Start an order':
        bot.send_message(message.chat.id, 'Send us your Group order link!')
        bot.register_next_step_handler(message, process_group_order_link)


def process_group_order_link(message):
    link = message.text
    # Process the group order link and register store name, delivery fee, duration
    # ...
    bot.send_message(message.chat.id, 'When do you want to close your group order?')
    show_closing_time_options(message.chat.id)


# round_time is a helper function for show_closing_time_options
# helps to round up times to the nearest 10 min for readability
def round_time(time):
    current_minute = time.minute
    to_add_minute = 10 - (current_minute % 10)
    return to_add_minute


# allows users 4 choices of order closing times
# rounds current time up to the nearest 10 min
# then, provides 4 timings in 15 min intervals from the rounded time
def show_closing_time_options(chat_id):

    # Get the current time
    current_time = datetime.now()

    # Create the reply markup
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)

    # Generate four buttons with 15-minute intervals rounded up to the nearest multiple of 5
    for i in range(4):
        button_time = current_time + timedelta(minutes=15 * i + round_time(current_time))
        # rounded_time = (button_time + timedelta(minutes=2)).replace(second=0, microsecond=0)
        button_text = button_time.strftime('%H:%M')
        button = types.KeyboardButton(button_text)
        markup.add(button)

    # Send the message with the keyboard
    bot.send_message(chat_id, 'Choose a closing time:', reply_markup=markup)


# Handler for handling user input
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # Process the selected time
    selected_time = message.text
    # Do something with the selected time
    bot.reply_to(message, f"You have selected the closing time as: {selected_time}")


@bot.message_handler(func=lambda msg: True)
def echo_all(message):
    bot.reply_to(message, message.text)


bot.infinity_polling()

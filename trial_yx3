#LETS GO MAN
import os
import telebot
from telebot import types
import geopy.distance
import requests
import sqlite3
import threading
from datetime import datetime, timedelta

# to do: 
# incorporate database into transport
# incorporate proximity checking
# accomodate next-day closing times 
# check if all data is of valid format and prompt user to rekey if invalid (e.g. link, postal code)


# Connect to the SQLite database
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# Create a table to store food order data
cursor.execute('''CREATE TABLE IF NOT EXISTS food_data_a
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   chat_id INTEGER,
                   location INTEGER,
                   leader_name TEXT,
                   restaurant_name TEXT,
                   link TEXT,
                   entry_date TEXT,
                   delete_time TEXT)''')

# Create a table to store transport trip data
cursor.execute('''CREATE TABLE IF NOT EXISTS transport_data
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   chat_id INTEGER,
                   pickup_code INTEGER,
                   leader_name TEXT,
                   dropoff_code INTEGER,
                   dropoff_name TEXT,
                   entry_date TEXT,
                   delete_time TEXT)''')

BOT_TOKEN = "6217965722:AAEW6DismZ6EdJDCjiNZqyh034J3fSm-sX0"
GOOGLE_MAPS_API_KEY = "AIzaSyBdfnEiKhiAVwWyM-EWflBM6NN9wpsNT3Y"

bot = telebot.TeleBot(BOT_TOKEN)

# Store pickup points and their locations
pickup_points = {}


# Handle /start and /hello commands
@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.reply_to(message, "Hi! How can I help you today?")
    show_options(message.chat.id)


# User can choose Food or Transport
def show_options(chat_id):
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    button1 = types.KeyboardButton('Food')
    button2 = types.KeyboardButton('Transport')
    keyboard.add(button1, button2)

    bot.send_message(chat_id, 'Please select an option:', reply_markup=keyboard)


# Handle user's choice of Food or Transport
@bot.message_handler(func=lambda message: message.text in ['Food', 'Transport'])
def handle_option(message):
    option = message.text
    if option == 'Food':
        show_food_options(message)
    elif option == 'Transport':
        show_transport_options(message)


# If user chooses Food...
# User can choose to Start or Join an order
def show_food_options(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button1 = types.KeyboardButton('Start an order')
    button2 = types.KeyboardButton('Join an order')
    keyboard.add(button1, button2)

    bot.send_message(message.chat.id, 'Food options:', reply_markup=keyboard)


# If user chooses to Start an order...
# Prompts user to send Grab group order link
@bot.message_handler(func=lambda message: message.text in ['Start an order', 'Join an order'])
def handle_food_option(message):
    option = message.text
    if option == 'Start an order':
        bot.send_message(message.chat.id,
                         'Where will the food be delivered to? Input the delivery postal code: ')

        # Store the chat ID for future reference
        chat_id = message.chat.id

        cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
        data = cursor.fetchone()

        if data is None:
            cursor.execute("INSERT INTO food_data_a (chat_id) VALUES (?)", (chat_id,))
            conn.commit()

        # Handle inputted delivery postal code
        bot.register_next_step_handler(message, process_start_code)

    elif option == 'Join an order':
        # Ask user to input postal code
        bot.send_message(message.chat.id, "Input your postal code and we'll look for nearby orders for you!")
        bot.register_next_step_handler(message, show_nearby_orders)


def show_nearby_orders(message):
    bot.send_message(message.chat.id, 'Here are the ongoing nearby orders: ')

    # Get the current date and time
    current_date = datetime.now().date()
    current_time = datetime.now().time()

    # Convert current_date to string format
    current_date_str = current_date.strftime('%Y-%m-%d')
    current_time_str = current_time.strftime('%H:%M')

    # Retrieve entries with the same date and deletion time later than the current time
    cursor.execute("SELECT * FROM food_data_a WHERE entry_date = ? AND delete_time > ?",
                   (current_date_str, current_time_str))
    data = cursor.fetchall()

    if data:
        response = "Data stored in the database:\n"
        for row in data:
            response += f"" \
                        f"ID: {row[0]}\n" \
                        f"Chat ID: {row[1]}\n" \
                        f"Location: {row[2]}\n" \
                        f"Order started by: {row[3]}\n" \
                        f"Restaurant name: {row[4]}\n" \
                        f"Link: {row[5]}\n" \
                        f"Entry date: {row[6]}\n" \
                        f"Order closes at: {row[7]}\n\n"

        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "No data found in the database.")


# Stores delivery location as postal code
# Retrieves and stores leader username, and entry date
# Asks user to send restaurant name
def process_start_code(message):
    location = int(message.text)

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Retrieve leader's Telegram handle
    leader_name = message.from_user.username

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
    data = cursor.fetchone()

    # Update the delivery location, leader name, and entry date in the database
    entry_date = datetime.now().strftime('%Y-%m-%d')
    cursor.execute("UPDATE food_data_a SET location = ?, leader_name = ?, entry_date = ? WHERE id = ?",
                   (location, leader_name, entry_date, data[0]))

    # Save changes to food_data
    conn.commit()

    # Next step: Ask user for restaurant name
    bot.send_message(message.chat.id, 'Where are you ordering from? Input restaurant name:')
    bot.register_next_step_handler(message, process_restaurant_name)


# Stores restaurant name
# Asks user to send group order link
def process_restaurant_name(message):
    restaurant_name = message.text

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
    data = cursor.fetchone()

    # Update the group order link in the database
    cursor.execute("UPDATE food_data_a SET restaurant_name = ? WHERE id = ?", (restaurant_name, data[0]))
    conn.commit()

    # Ask user to send group order link
    bot.send_message(message.chat.id, 'Send us your Group order link!')
    bot.register_next_step_handler(message, process_link)


# Stores group order link
# Asks user for order closing time
def process_link(message):
    link = message.text

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
    data = cursor.fetchone()

    # Update the group order link in the database
    cursor.execute("UPDATE food_data_a SET link = ? WHERE id = ?", (link, data[0]))
    conn.commit()

    bot.send_message(message.chat.id, 'When do you want to send your order in?')
    show_closing_time_options(message)


# round_time is a helper function for show_closing_time_options
# helps to round up times to the nearest 10 min for readability
def round_time(time):
    current_minute = time.minute
    to_add_minute = 10 - (current_minute % 10)
    return to_add_minute


# allows users 4 choices of order closing times
# rounds current time up to the nearest 10 min
# then, provides 4 timings in 15 min intervals from the rounded time
def show_closing_time_options(message):
    # Get the current time
    current_time = datetime.now()

    # Create the reply markup
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)

    # Generate four buttons with 15-minute intervals rounded up to the nearest multiple of 5
    for i in range(4):
        button_time = current_time + timedelta(minutes=15 * i + round_time(current_time))
        button_text = button_time.strftime('%H:%M')
        button = types.KeyboardButton(button_text)
        markup.add(button)

    # Send the message with the keyboard
    bot.send_message(message.chat.id, 'Choose a closing time:', reply_markup=markup)
    bot.register_next_step_handler(message, handle_closing)


# Handler for handling user input
# @bot.message_handler(func=lambda message: is_valid_time(message.text))
def handle_closing(message):
    # Process the selected time
    closing_time = message.text

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (message.chat.id,))
    data = cursor.fetchone()

    # Update the closing time in the database
    cursor.execute("UPDATE food_data_a SET delete_time = ? WHERE id = ?", (closing_time, data[0]))
    conn.commit()

    # Do something with the selected time
    bot.reply_to(message, f"You have selected the closing time as: {closing_time}")
    food_summary(message)


# Send user the summary of their food order for confirmation
def food_summary(message):
    # Show order summary
    bot.send_message(message.chat.id,
                     'If any of the above information is wrong, please re-key your order using /start.')


# Function to check if the value is a valid time in HH:MM format
def is_valid_time(value):
    try:
        datetime.strptime(value, "%H:%M")
        return True
    except ValueError:
        return False


# If user chooses Transport...
# Bot will recommend journeys with pickup and drop-off within 1km radius
# Prompts user to input pickup and drop-off postal codes
def show_transport_options(message):
    bot.reply_to(message, 'Input postal code of pick-up point:')
    bot.register_next_step_handler(message, handle_pickup)


# @bot.message_handler(func=lambda message: 829999 >= int(message.text) >= 10000)
def handle_pickup(message):
    pickup_code = message.text
    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(pickup_code)
    if coordinates:
        pickup_points[message.chat.id] = coordinates
        bot.reply_to(message, 'Pick-up confirmed: ' + pickup_code)
        bot.send_message(message.chat.id, 'Input postal code of drop-off point:')
        bot.register_next_step_handler(message, handle_dropoff)
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')


# @bot.message_handler(func=lambda message: 829999 >= int(message.text) >= 10000)
def handle_dropoff(message):
    dropoff_code = message.text
    # Use the Google Maps Geocoding API to get the coordinates of the drop-off point based on the postal code
    coordinates = get_coordinates(dropoff_code)
    if coordinates:
        pickup_point = pickup_points.get(message.chat.id)
        if pickup_point:
            distance = calculate_distance(pickup_point, coordinates)
            bot.send_message(message.chat.id, 'Drop-off confirmed: ' + message.text)
            bot.send_message(message.chat.id, f"Distance between pickup and drop-off: {distance:.2f} km")
            bot.register_next_step_handler(message, transport_summary)
        else:
            bot.send_message(message.chat.id, 'No pickup point registered. Please enter the pickup postal code first.')
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')


# register pickup location
def process_pickup(message):
    postal_code = message.text
    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(postal_code)
    if coordinates:
        pickup_points[message.chat.id] = coordinates
        bot.send_message(message.chat.id, 'Pickup point registered.')
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')


# register dropoff location
def process_dropoff(message):
    postal_code = message.text
    # Use the Google Maps Geocoding API to get the coordinates of the drop-off point based on the postal code
    coordinates = get_coordinates(postal_code)
    if coordinates:
        pickup_point = pickup_points.get(message.chat.id)
        if pickup_point:
            distance = calculate_distance(pickup_point, coordinates)
            bot.send_message(message.chat.id, f"Distance between pickup and drop-off: {distance:.2f} km")
        else:
            bot.send_message(message.chat.id, 'No pickup point registered. Please enter the pickup postal code first.')
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')


# Calculate distance between two coordinates using geodesic distance
def calculate_distance(coord1, coord2):
    return geopy.distance.geodesic(coord1, coord2).kilometers


# Get coordinates based on postal code using Google Maps Geocoding API
def get_coordinates(postal_code):
    url = f'https://maps.googleapis.com/maps/api/geocode/json?address={postal_code}&key={GOOGLE_MAPS_API_KEY}'

    response = requests.get(url)
    data = response.json()

    if data['status'] == 'OK':
        results = data['results']
        if len(results) > 0:
            location = results[0]['geometry']['location']
            lat = location['lat']
            lng = location['lng']
            return (lat, lng)

    return None


# Show summary of Transport trip created
def transport_summary(message):
    pass


bot.polling()

import geopy.distance
import requests
import sqlite3
import telebot
from datetime import datetime, timedelta
from telebot import types

# Connect to the SQLite database
conn = sqlite3.connect('user_data.db', check_same_thread=False)
cursor = conn.cursor()

# Create a table to store food order data
cursor.execute('''CREATE TABLE IF NOT EXISTS food_data_a
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   chat_id INTEGER,
                   location INTEGER,
                   leader_name TEXT,
                   restaurant_name TEXT,
                   link TEXT,
                   entry_date TEXT,
                   delete_time TEXT)''')

# Create a table to store transport trip data
cursor.execute('''CREATE TABLE IF NOT EXISTS transport_data_a
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   chat_id INTEGER,
                   pickup_code INTEGER,
                   leader_name TEXT,
                   dropoff_code INTEGER,
                   dropoff_name TEXT,
                   entry_date TEXT,
                   delete_time TEXT)''')

BOT_TOKEN = "6217965722:AAEW6DismZ6EdJDCjiNZqyh034J3fSm-sX0"
GOOGLE_MAPS_API_KEY = "AIzaSyBdfnEiKhiAVwWyM-EWflBM6NN9wpsNT3Y"

bot = telebot.TeleBot(BOT_TOKEN)

# pickup and dropoff dictionaries
pickup_dict = {}
dropoff_dict = {}
nearby_pickup_postals_store = []

# Store location points and their locations for order
# Stored in (order postal code : order coordinates) format
location_points = {}

# If user chooses to join a transport trip,
# this list of length 2 stores his pick-up and drop-off postal codes
user_postal_codes = [0, 0]


# Handle /start and /hello commands
@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.reply_to(message, "Hi! How can I help you today?")
    show_options(message.chat.id)


# User can choose Food or Transport
def show_options(chat_id):
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    button1 = types.KeyboardButton('Food')
    button2 = types.KeyboardButton('Transport')
    keyboard.add(button1, button2)

    bot.send_message(chat_id, 'Please select an option:', reply_markup=keyboard)


# Handle user's choice of Food or Transport
@bot.message_handler(func=lambda message: message.text in ['Food', 'Transport'])
def handle_option(message):
    option = message.text
    if option == 'Food':
        show_food_options(message)
    elif option == 'Transport':
        show_transport_options(message)


# If user chooses Food...
# User can choose to Start or Join an order
def show_food_options(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button1 = types.KeyboardButton('Start an order')
    button2 = types.KeyboardButton('Join an order')
    keyboard.add(button1, button2)

    bot.send_message(message.chat.id, 'Food options:', reply_markup=keyboard)


# If user chooses to Start an order...
# Prompts user to send Grab group order link
@bot.message_handler(func=lambda message: message.text in ['Start an order', 'Join an order'])
def handle_food_option(message):
    option = message.text
    if option == 'Start an order':
        bot.send_message(message.chat.id,
                         'Where will the food be delivered to? Input the delivery postal code: ')

        # Store the chat ID for future reference
        chat_id = message.chat.id

        cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
        data = cursor.fetchone()

        if data is None:
            cursor.execute("INSERT INTO food_data_a (chat_id) VALUES (?)", (chat_id,))
            conn.commit()

        # Handle inputted delivery postal code
        bot.register_next_step_handler(message, process_start_code)

    elif option == 'Join an order':
        # Ask user to input postal code
        bot.send_message(message.chat.id, "Input your postal code and we'll look for nearby orders for you!")
        bot.register_next_step_handler(message, show_nearby_orders)


def show_nearby_orders(message):
    joinner_location = message.text
    joinner_location_int = int(message.text)

    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(joinner_location)

    if coordinates:
        # Create list to store all postal codes of ongoing orders that are within 1km from joinner location
        nearby_postals = []

        # Check distance between joinner and every starter
        # postal : coord
        for postal in location_points:
            location_coord = location_points[postal]
            distance = calculate_distance(location_coord, coordinates)
            if distance <= 1.00:
                nearby_postals.append(postal)

        # Get the current date and time
        current_date = datetime.now().date()
        current_time = datetime.now().time()

        # Convert current_date to string format
        current_date_str = current_date.strftime('%Y-%m-%d')
        current_time_str = current_time.strftime('%H:%M')

        # Query to retrieve data sets with matching entry date, delete time, and postal code
        query = "SELECT * FROM food_data_a WHERE entry_date = ? AND delete_time > ? AND location IN ({})".format(
            ','.join(['?'] * len(nearby_postals)))

        # Execute the query and fetch the results
        cursor.execute(query, (current_date_str, current_time_str) + tuple(nearby_postals))
        data = cursor.fetchall()

        if data:
            response = "Here are the ongoing nearby orders:\n"
            for row in data:
                response += f"" \
                            f"ID: {row[0]}\n" \
                            f"Chat ID: {row[1]}\n" \
                            f"Location: {row[2]}\n" \
                            f"Order started by: @{row[3]}\n" \
                            f"Restaurant name: {row[4]}\n" \
                            f"Link: {row[5]}\n" \
                            f"Entry date: {row[6]}\n" \
                            f"Order closes at: {row[7]}\n\n"

            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "No orders near you at the moment :( \nStart an order using /start!")
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, show_nearby_orders)


# Checks if delivery location postal code is valid
# Stores delivery location as postal code
# Retrieves and stores leader username, and entry date
# Asks user to send restaurant name
def process_start_code(message):
    location = message.text
    location_int = int(message.text)

    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(location)

    # If postal code is valid, begin storing order data
    if coordinates:
        location_points[location_int] = coordinates

        # Store the chat ID for future reference
        chat_id = message.chat.id

        # Retrieve leader's Telegram handle
        leader_name = message.from_user.username

        # Fetch the existing user entry
        cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
        data = cursor.fetchone()

        # Update the delivery location, leader name, and entry date in the database
        entry_date = datetime.now().strftime('%Y-%m-%d')
        cursor.execute("UPDATE food_data_a SET location = ?, leader_name = ?, entry_date = ? WHERE id = ?",
                       (location, leader_name, entry_date, data[0]))

        # Save changes to food_data
        conn.commit()

        # Next step: Ask user for restaurant name
        bot.send_message(message.chat.id, 'Where are you ordering from? Input restaurant name:')
        bot.register_next_step_handler(message, process_restaurant_name)

    # If postal code is invalid, user is asked to try again
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, process_start_code)


# Stores restaurant name
# Asks user to send group order link
def process_restaurant_name(message):
    restaurant_name = message.text

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
    data = cursor.fetchone()

    # Update the group order link in the database
    cursor.execute("UPDATE food_data_a SET restaurant_name = ? WHERE id = ?", (restaurant_name, data[0]))
    conn.commit()

    # Ask user to send group order link
    bot.send_message(message.chat.id, 'Send us your Group order link!')
    bot.register_next_step_handler(message, process_link)


# Stores group order link
# Asks user for order closing time
def process_link(message):
    link = message.text

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (chat_id,))
    data = cursor.fetchone()

    # Update the group order link in the database
    cursor.execute("UPDATE food_data_a SET link = ? WHERE id = ?", (link, data[0]))
    conn.commit()

    bot.send_message(message.chat.id, 'When do you want to send your order in?')
    show_closing_time_options(message)


# round_time is a helper function for show_closing_time_options
# helps to round up times to the nearest 10 min for readability
def round_time(time):
    current_minute = time.minute
    to_add_minute = 10 - (current_minute % 10)
    return to_add_minute


# allows users 4 choices of order closing times
# rounds current time up to the nearest 10 min
# then, provides 4 timings in 15 min intervals from the rounded time
def show_closing_time_options(message):
    # Get the current time
    current_time = datetime.now()

    # Create the reply markup
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)

    # Generate four buttons with 15-minute intervals rounded up to the nearest multiple of 5
    for i in range(4):
        button_time = current_time + timedelta(minutes=15 * i + round_time(current_time))
        button_text = button_time.strftime('%H:%M')
        button = types.KeyboardButton(button_text)
        markup.add(button)

    # Send the message with the keyboard
    bot.send_message(message.chat.id, 'Choose a closing time:', reply_markup=markup)
    bot.register_next_step_handler(message, handle_closing)


# Handler for handling user input
# @bot.message_handler(func=lambda message: is_valid_time(message.text))
def handle_closing(message):
    # Process the selected time
    closing_time = message.text

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM food_data_a WHERE chat_id = ?", (message.chat.id,))
    data = cursor.fetchone()

    # Update the closing time in the database
    cursor.execute("UPDATE food_data_a SET delete_time = ? WHERE id = ?", (closing_time, data[0]))
    conn.commit()

    # Send the user a summary of the order they started
    bot.reply_to(message, f"You have selected the closing time as: {closing_time}")
    food_summary(message)


# Send user the summary of their food order for confirmation
def food_summary(message):
    # Show order summary
    bot.send_message(message.chat.id,
                     'If any of the above information is wrong, please re-key your order using /start.')


# Function to check if the value is a valid time in HH:MM format
def is_valid_time(value):
    try:
        datetime.strptime(value, "%H:%M")
        return True
    except ValueError:
        return False


# If user chooses Transport...
# Bot will recommend journeys with pickup and drop-off within 1km radius
# Prompts user to input pickup and drop-off postal codes
def show_transport_options(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    button1 = types.KeyboardButton('Start a trip')
    button2 = types.KeyboardButton('Join a trip')
    keyboard.add(button1, button2)

    bot.send_message(message.chat.id, 'Transport options:', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['Start a trip', 'Join a trip'])
def handle_transport_option(message):
    option = message.text
    if option == 'Start a trip':
        bot.send_message(message.chat.id, 'Input postal code of pick-up point:')

        # Store the chat ID for future reference
        chat_id = message.chat.id

        cursor.execute("SELECT * FROM transport_data_a WHERE chat_id = ?", (chat_id,))
        data = cursor.fetchone()

        if data is None:
            cursor.execute("INSERT INTO transport_data_a (chat_id) VALUES (?)", (chat_id,))
            conn.commit()

        # Handle inputted delivery postal code
        bot.register_next_step_handler(message, handle_pickup)

    elif option == 'Join a trip':
        # Ask user to input pick-up postal code
        bot.send_message(message.chat.id, "Input your pick-up postal code: ")
        bot.register_next_step_handler(message, handle_join_pickup)


def handle_join_pickup(message):
    joinner_pickup_postal = message.text
    joinner_pickup_postal_int = int(message.text)
    user_postal_codes[0] = joinner_pickup_postal

    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(joinner_pickup_postal)

    if coordinates:
        bot.send_message(message.chat.id, "Input your drop-off postal code: ")
        bot.register_next_step_handler(message, show_similar_trips)
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, handle_join_pickup)


def show_similar_trips(message):
    joinner_dropoff_postal = message.text
    joinner_dropoff_postal_int = int(message.text)
    user_postal_codes[1] = joinner_dropoff_postal

    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    joinner_pickup_coords = get_coordinates(user_postal_codes[0])
    joinner_dropoff_coords = get_coordinates(user_postal_codes[1])

    if joinner_dropoff_coords:
        # Create list to store all postal codes of ongoing orders that are within 1km from joinner location
        nearby_pickup_postals = []

        # Check distance between joinner and every starter
        # postal : coord
        for postal in pickup_dict:
            pickup_coord = pickup_dict[postal]
            distance = calculate_distance(pickup_coord, joinner_pickup_coords)
            if distance <= 1.00:
                nearby_pickup_postals.append(postal)

        # Create list to store all postal codes of ongoing orders that are within 1km from joinner location
        nearby_dropoff_postals = []

        # Check distance between joinner and every starter
        # postal : coord
        for postal in dropoff_dict:
            dropoff_coord = dropoff_dict[postal]
            distance = calculate_distance(dropoff_coord, joinner_dropoff_coords)
            if distance <= 1.00:
                nearby_dropoff_postals.append(postal)

        # Get the current date and time
        current_date = datetime.now().date()
        current_time = datetime.now().time()

        # Convert current_date to string format
        current_date_str = current_date.strftime('%Y-%m-%d')
        current_time_str = current_time.strftime('%H:%M')

        query = "SELECT * FROM transport_data_a WHERE entry_date = ? AND delete_time > ? " \
                "AND dropoff_code IN ({}) AND pickup_code IN ({})" \
            .format(','.join(['?'] * len(nearby_dropoff_postals)), ','.join(['?'] * len(nearby_pickup_postals)))

        # Combine the nearby_postals lists for the parameter values
        params = (current_date_str, current_time_str) + tuple(nearby_dropoff_postals) + tuple(nearby_pickup_postals)

        # Execute the query and fetch the results
        cursor.execute(query, params)
        data = cursor.fetchall()

        if data:
            bot.send_message(message.chat.id, 'Here are similar trips: ')
            response = "Data stored in the database:\n"
            for row in data:
                response += f"" \
                            f"ID: {row[0]}\n" \
                            f"Chat ID: {row[1]}\n" \
                            f"Pick-up: {row[2]}\n" \
                            f"Trip started by: @{row[3]}\n" \
                            f"Drop-off: {row[4]}\n" \
                            f"Drop-off name: {row[5]}\n" \
                            f"Entry date: {row[6]}\n" \
                            f"Departs at: {row[7]}\n\n"

            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "No similar trips available. Start a trip using /start!")
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, show_similar_trips)


def handle_pickup(message):
    pickup_code = message.text
    pickup_code_int = int(message.text)

    # Use the Google Maps Geocoding API to get the coordinates of the pickup point based on the postal code
    coordinates = get_coordinates(pickup_code)

    if coordinates:
        pickup_dict[pickup_code_int] = coordinates

        # Store the chat ID for future reference
        chat_id = message.chat.id

        # Retrieve leader's Telegram handle
        leader_name = message.from_user.username

        # Fetch the existing user entry
        cursor.execute("SELECT * FROM transport_data_a WHERE chat_id = ?", (message.chat.id,))
        data = cursor.fetchone()

        # Update the closing time in the database
        entry_date = datetime.now().strftime('%Y-%m-%d')
        cursor.execute("UPDATE transport_data_a SET pickup_code = ?, leader_name = ?, entry_date = ? WHERE id = ?",
                       (pickup_code_int, leader_name, entry_date, data[0]))
        conn.commit()

        # Tell user pick-up point has been registered
        bot.reply_to(message, 'Pick-up confirmed: ' + pickup_code)

        # Ask user for drop-off point postal code
        bot.send_message(message.chat.id, 'Input postal code of drop-off point:')
        bot.register_next_step_handler(message, handle_dropoff)

    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, handle_pickup)


def handle_dropoff(message):
    dropoff_code = message.text
    dropoff_code_int = int(message.text)

    # Store the chat ID for future reference
    chat_id = message.chat.id

    # Use the Google Maps Geocoding API to get the coordinates of the drop-off point based on the postal code
    coordinates = get_coordinates(dropoff_code)

    if coordinates:
        dropoff_dict[dropoff_code_int] = coordinates

        # Fetch the existing user entry
        cursor.execute("SELECT * FROM transport_data_a WHERE chat_id = ?", (message.chat.id,))
        data = cursor.fetchone()

        # Update the closing time in the database
        cursor.execute("UPDATE transport_data_a SET dropoff_code = ? WHERE id = ?",
                       (dropoff_code_int, data[0]))
        conn.commit()

        # Tell user drop-off point has been registered
        bot.send_message(message.chat.id, 'Drop-off confirmed: ' + message.text)

        # Send the user a summary of the trip they started
        bot.send_message(message.chat.id, "When are you departing? Input departure time (e.g. 14:10):")
        bot.register_next_step_handler(message, handle_depart)
    else:
        bot.send_message(message.chat.id, 'Invalid postal code. Please try again.')
        bot.register_next_step_handler(message, handle_dropoff)


# Store departure time
def handle_depart(message):
    # Process the selected time
    depart_time = message.text

    # Fetch the existing user entry
    cursor.execute("SELECT * FROM transport_data_a WHERE chat_id = ?", (message.chat.id,))
    data = cursor.fetchone()

    # Update the closing time in the database
    cursor.execute("UPDATE transport_data_a SET delete_time = ? WHERE id = ?", (depart_time, data[0]))
    conn.commit()

    # Send the user a summary of the order they started
    bot.reply_to(message, f"Departure time confirmed: {depart_time}")
    transport_summary(message)


# Send user the summary of their transport trip for confirmation
def transport_summary(message):
    # Show order summary
    bot.send_message(message.chat.id,
                     'If any of the above information is wrong, please re-key your order using /start.')


# Calculate distance between two coordinates using geodesic distance
def calculate_distance(coord1, coord2):
    return geopy.distance.geodesic(coord1, coord2).kilometers


# Get coordinates based on postal code using Google Maps Geocoding API
def get_coordinates(postal_code):
    url = f'https://maps.googleapis.com/maps/api/geocode/json?address={postal_code}&key={GOOGLE_MAPS_API_KEY}'

    response = requests.get(url)
    data = response.json()

    if data['status'] == 'OK':
        results = data['results']
        if len(results) > 0:
            location = results[0]['geometry']['location']
            lat = location['lat']
            lng = location['lng']
            return (lat, lng)

    return None


bot.polling()
